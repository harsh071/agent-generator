"""
Web interface for the agent generation engine
"""

import os
import json
import sys
from typing import Dict, Any, List, Optional
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import requests

from agent_generator.core.engine import AgentGenerationEngine


class WebUI:
    """
    Web interface for the agent generation engine
    """
    
    def __init__(self, engine: AgentGenerationEngine, host: str = "localhost", port: int = 8080):
        """
        Initialize the Web UI
        
        Args:
            engine: Agent generation engine
            host: Host to run the server on
            port: Port to run the server on
        """
        self.engine = engine
        self.host = host
        self.port = port
        
        # Create the templates and static directories if they don't exist
        template_dir = os.path.join(os.path.dirname(__file__), "templates")
        static_dir = os.path.join(os.path.dirname(__file__), "static")
        os.makedirs(template_dir, exist_ok=True)
        os.makedirs(static_dir, exist_ok=True)
        
        # Create the necessary template and static files if they don't exist
        self._create_frontend_files()
        
        self.app = Flask(__name__, 
                         template_folder=template_dir,
                         static_folder=static_dir)
        # Enable CORS for all routes
        CORS(self.app)
        self._setup_routes()
        
    def _setup_routes(self):
        """Set up the Flask routes"""
        
        @self.app.route('/')
        def index():
            """Render the main page"""
            return render_template('index.html')
        
        @self.app.route('/api/chats', methods=['GET'])
        def get_chats():
            """Get all chat sessions for a user"""
            # In a real app, you would authenticate the user and get their chats
            # For now, we'll return mock data
            chats = [
                {"id": "1", "name": "Chat 1", "created_at": "2025-03-15T10:00:00Z"},
                {"id": "2", "name": "Chat 2", "created_at": "2025-03-15T11:00:00Z"}
            ]
            return jsonify(chats)
        
        @self.app.route('/api/chats/<chat_id>', methods=['GET'])
        def get_chat(chat_id):
            """Get a single chat session with its messages"""
            # In a real app, you would fetch this from a database
            chat = {
                "id": chat_id,
                "name": f"Chat {chat_id}",
                "created_at": "2025-03-15T10:00:00Z",
                "messages": [
                    {"id": "1", "role": "user", "content": "Hello", "timestamp": "2025-03-15T10:01:00Z"},
                    {"id": "2", "role": "assistant", "content": "Hi there! How can I help you?", "timestamp": "2025-03-15T10:01:05Z"}
                ]
            }
            return jsonify(chat)
        
        @self.app.route('/api/chats', methods=['POST'])
        def create_chat():
            """Create a new chat session"""
            data = request.json
            # In a real app, you would save this to a database
            chat = {
                "id": "3",  # This would be generated by the database
                "name": data.get("name", "New Chat"),
                "created_at": "2025-03-15T12:00:00Z"
            }
            return jsonify(chat), 201
        
        @self.app.route('/api/chats/<chat_id>/messages', methods=['POST'])
        def send_message(chat_id):
            """Send a message in a chat session"""
            data = request.json
            
            # Process the message using the agent generation engine
            # In a real app, this would interact with the LLM
            user_message = data.get("content", "")
            
            # Generate a response based on specifications
            specifications = {
                "name": "Chat Agent",
                "description": "An agent that responds to user messages",
                "language": "python",
                "capabilities": ["question_answering"],
                "use_case": "Responding to user queries in a chat interface"
            }
            
            # Use the engine to generate a response
            # This is a simplified version - in a real app, you'd have a more sophisticated approach
            agent_data = self.engine.generate_agent(specifications)
            
            # In a real app, you would save this to a database
            message = {
                "id": "4",  # This would be generated by the database
                "role": "assistant",
                "content": f"I've processed your message: '{user_message}'. Here's what I can tell you about agent generation.",
                "timestamp": "2025-03-15T12:01:00Z"
            }
            return jsonify(message), 201
        
        @self.app.route('/api/chats/<chat_id>/messages', methods=['GET'])
        def get_messages(chat_id):
            """Get all messages for a chat session"""
            # In a real app, you would fetch this from a database
            messages = [
                {"id": "1", "role": "user", "content": "Hello", "timestamp": "2025-03-15T10:01:00Z"},
                {"id": "2", "role": "assistant", "content": "Hi there! How can I help you?", "timestamp": "2025-03-15T10:01:05Z"}
            ]
            return jsonify(messages)
        
        @self.app.route('/api/chats/<chat_id>', methods=['DELETE'])
        def delete_chat(chat_id):
            """Delete a chat session"""
            # In a real app, you would delete this from a database
            return "", 204
    
    def run(self):
        """
        Run the web server
        """
        print("=" * 50)
        print("LLM Agent Generation Engine - Web UI")
        print("=" * 50)
        print(f"\nWeb server running at http://{self.host}:{self.port}")
        print("Press Ctrl+C to stop the server")
        
        # Run the Flask app
        self.app.run(host=self.host, port=self.port, debug=True)
    
    def _create_frontend_files(self):
        """Create the necessary frontend files if they don't exist"""
        # Create the index.html template
        template_path = os.path.join(os.path.dirname(__file__), "templates", "index.html")
        if not os.path.exists(template_path):
            with open(template_path, "w") as f:
                f.write("""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Agent Generation Engine</title>
    <link rel="stylesheet" href="/static/css/styles.css">
</head>
<body>
    <div class="app-container">
        <div class="sidebar">
            <div class="sidebar-header">
                <h1>Agent Generator</h1>
                <button id="new-chat-btn" class="new-chat-btn">New Chat</button>
            </div>
            <div class="chat-list" id="chat-list">
                <!-- Chat list will be populated here -->
            </div>
        </div>
        <div class="main-content">
            <div class="chat-container" id="chat-container">
                <div class="chat-messages" id="chat-messages">
                    <!-- Messages will be displayed here -->
                </div>
                <div class="chat-input-container">
                    <textarea id="chat-input" placeholder="Type your message here..."></textarea>
                    <button id="send-btn">Send</button>
                </div>
            </div>
        </div>
    </div>
    <script src="/static/js/app.js"></script>
</body>
</html>""")
        
        # Create the CSS directory and styles.css file
        css_dir = os.path.join(os.path.dirname(__file__), "static", "css")
        os.makedirs(css_dir, exist_ok=True)
        css_path = os.path.join(css_dir, "styles.css")
        if not os.path.exists(css_path):
            with open(css_path, "w") as f:
                f.write("""/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: #f5f5f5;
    color: #333;
}

/* Main layout */
.app-container {
    display: flex;
    height: 100vh;
    overflow: hidden;
}

/* Sidebar styles */
.sidebar {
    width: 280px;
    background-color: #2c3e50;
    color: white;
    display: flex;
    flex-direction: column;
    border-right: 1px solid #ddd;
}

.sidebar-header {
    padding: 20px;
    border-bottom: 1px solid #34495e;
}

.sidebar-header h1 {
    font-size: 1.5rem;
    margin-bottom: 15px;
}

.new-chat-btn {
    width: 100%;
    padding: 10px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}

.new-chat-btn:hover {
    background-color: #2980b9;
}

.chat-list {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
}

.chat-item {
    padding: 10px 15px;
    margin-bottom: 5px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.chat-item:hover {
    background-color: #34495e;
}

.chat-item.active {
    background-color: #3498db;
}

/* Main content area */
.main-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.chat-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 20px;
    overflow: hidden;
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.message {
    max-width: 80%;
    padding: 12px 16px;
    border-radius: 10px;
    line-height: 1.4;
}

.message.user {
    align-self: flex-end;
    background-color: #3498db;
    color: white;
}

.message.assistant {
    align-self: flex-start;
    background-color: #ecf0f1;
    color: #333;
}

.chat-input-container {
    display: flex;
    margin-top: 15px;
    border-top: 1px solid #ddd;
    padding-top: 15px;
}

#chat-input {
    flex: 1;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    resize: none;
    height: 60px;
    font-size: 14px;
}

#send-btn {
    margin-left: 10px;
    padding: 0 20px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}

#send-btn:hover {
    background-color: #2980b9;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .app-container {
        flex-direction: column;
    }
    
    .sidebar {
        width: 100%;
        height: auto;
        max-height: 40vh;
    }
}""")
        
        # Create the JS directory and app.js file
        js_dir = os.path.join(os.path.dirname(__file__), "static", "js")
        os.makedirs(js_dir, exist_ok=True)
        js_path = os.path.join(js_dir, "app.js")
        if not os.path.exists(js_path):
            with open(js_path, "w") as f:
                f.write("""// DOM Elements
const chatList = document.getElementById('chat-list');
const chatMessages = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-input');
const sendBtn = document.getElementById('send-btn');
const newChatBtn = document.getElementById('new-chat-btn');

// State
let currentChatId = null;
let chats = [];

// Initialize the app
document.addEventListener('DOMContentLoaded', () => {
    fetchChats();
    
    // Event listeners
    sendBtn.addEventListener('click', sendMessage);
    chatInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    newChatBtn.addEventListener('click', createNewChat);
});

// Fetch all chats
async function fetchChats() {
    try {
        const response = await fetch('/api/chats');
        chats = await response.json();
        renderChatList();
        
        // Select the first chat if available
        if (chats.length > 0 && !currentChatId) {
            selectChat(chats[0].id);
        }
    } catch (error) {
        console.error('Error fetching chats:', error);
    }
}

// Render the chat list
function renderChatList() {
    chatList.innerHTML = '';
    
    chats.forEach(chat => {
        const chatItem = document.createElement('div');
        chatItem.className = `chat-item ${chat.id === currentChatId ? 'active' : ''}`;
        chatItem.textContent = chat.name;
        chatItem.addEventListener('click', () => selectChat(chat.id));
        
        // Add delete button
        const deleteBtn = document.createElement('span');
        deleteBtn.className = 'delete-btn';
        deleteBtn.innerHTML = '&times;';
        deleteBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            deleteChat(chat.id);
        });
        
        chatItem.appendChild(deleteBtn);
        chatList.appendChild(chatItem);
    });
}

// Select a chat
async function selectChat(chatId) {
    currentChatId = chatId;
    renderChatList();
    
    try {
        const response = await fetch(`/api/chats/${chatId}`);
        const chat = await response.json();
        renderMessages(chat.messages);
    } catch (error) {
        console.error('Error fetching chat:', error);
    }
}

// Render messages
function renderMessages(messages) {
    chatMessages.innerHTML = '';
    
    messages.forEach(message => {
        const messageEl = document.createElement('div');
        messageEl.className = `message ${message.role}`;
        messageEl.textContent = message.content;
        chatMessages.appendChild(messageEl);
    });
    
    // Scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Send a message
async function sendMessage() {
    const content = chatInput.value.trim();
    if (!content) return;
    
    // Clear input
    chatInput.value = '';
    
    // Create a new chat if none is selected
    if (!currentChatId) {
        await createNewChat();
    }
    
    // Add user message to UI immediately
    const userMessage = {
        id: Date.now().toString(),
        role: 'user',
        content: content,
        timestamp: new Date().toISOString()
    };
    
    addMessageToUI(userMessage);
    
    try {
        // Send message to server
        const response = await fetch(`/api/chats/${currentChatId}/messages`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ content })
        });
        
        const assistantMessage = await response.json();
        addMessageToUI(assistantMessage);
    } catch (error) {
        console.error('Error sending message:', error);
    }
}

// Add a message to the UI
function addMessageToUI(message) {
    const messageEl = document.createElement('div');
    messageEl.className = `message ${message.role}`;
    messageEl.textContent = message.content;
    chatMessages.appendChild(messageEl);
    
    // Scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Create a new chat
async function createNewChat() {
    try {
        const response = await fetch('/api/chats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: 'New Chat' })
        });
        
        const newChat = await response.json();
        chats.unshift(newChat);
        renderChatList();
        selectChat(newChat.id);
    } catch (error) {
        console.error('Error creating new chat:', error);
    }
}

// Delete a chat
async function deleteChat(chatId) {
    if (!confirm('Are you sure you want to delete this chat?')) return;
    
    try {
        await fetch(`/api/chats/${chatId}`, {
            method: 'DELETE'
        });
        
        chats = chats.filter(chat => chat.id !== chatId);
        
        if (currentChatId === chatId) {
            currentChatId = chats.length > 0 ? chats[0].id : null;
        }
        
        renderChatList();
        
        if (currentChatId) {
            selectChat(currentChatId);
        } else {
            chatMessages.innerHTML = '';
        }
    } catch (error) {
        console.error('Error deleting chat:', error);
    }
}""")
